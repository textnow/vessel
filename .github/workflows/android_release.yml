name: Android Release

# To create a new release, go to https://github.com/textnow/vessel/actions and run the release job
# Note: as this is WIP, this won't yet merge to master automatically
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (X.Y.Z)'

env:
  VERSION_NAME: "${{ github.events.inputs.release_version }}"
  VERSION_CODE: "${{ github.run_number }}"
  BRANCH: "release/${{ env.VERSION_NAME }}"

jobs:

  # Create a release branch to work from
  prepare_branch:
    runs-on: ubuntu-latest
    steps:
      # Initial checkout against the base branch specified in the UI
      - uses: actions/checkout@v2

      # Then checkout a release branch using the requested name
      - name: Create Release Branch
        run: git checkout -b ${{ env.BRANCH }}

      - name: Initialize Git Config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Update Changelog
        uses: thomaseizinger/keep-a-changelog-new-release@v1
        with:
          version: ${{ env.VERSION_NAME }}

      - name: Commit Changes
        run: |
          git add CHANGELOG.md
          git commit -m "Prepare release ${{ VERSION_NAME }}(${{ VERSION_CODE }})"
          git push origin ${{ env.BRANCH }}

  # Test debug and release, run coverage against debug
  test:
    runs-on: ubuntu-latest
    needs: [prepare_branch]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Initialize Git Config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Run Tests
        run: ./gradlew test jacocoTestReportDebug

      - name: Update Coverage Badge
        run: .github/scripts/generateCoverageBadge.sh

      - name: Commit Changes
        run: |
          git add .github/badges/coverage.json
          git commit -m "Update coverage badge"
          git push origin ${{ env.BRANCH }}

      - name: Archive Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'reports'
          path: vessel-runtime/build/reports/

  # Assemble debug and release, just as an extra validation step
  assemble:
    runs-on: ubuntu-latest
    needs: [prepare_branch]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Assemble
        run: ./gradlew assemble

  # Publish the release build
  publish:
    runs-on: ubuntu-latest
    needs: [test, assemble]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Publish AAR
        env:
          GHR_USER: ${{ env.GITHUB_ACTOR }}
          GHR_PWD: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew publishReleasePublicationToGitHubPackagesRepository

  # If we got this far, create a release
  create_release:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Initialize Git Config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Extract Release Notes
        id: release_notes
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_NAME }}
          release_name: Release ${{ env.VERSION_NAME }} (${{ env.VERSION_CODE }})
          body: |
            ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
